@startuml
actor User
participant "API Service"
participant "User Model"
database Database

User -> "API Service": POST /users (User Data)
activate "API Service"
"API Service" -> "API Service": Validate Input Data
"API Service" -> "User Model": createUser(userData)
activate "User Model"
"User Model" -> "User Model": Validate Data
"User Model" -> "User Model": Hash Password
"User Model" -> Database: Persist User Data
activate Database
Database --> "User Model": Confirmation (User ID)
deactivate Database
"User Model" -> "User Model": Create User Object
"User Model" --> "API Service": User Object
deactivate "User Model"
"API Service" -> "API Service": Generate Success Response
"API Service" --> User: HTTP 201 (User Data, Confirmation)
deactivate "API Service"
@enduml


@startuml
actor User
participant "API Service"
participant "Place Model"
database Database

User -> "API Service": POST /places (Place Data, Auth Token)
activate "API Service"
"API Service" -> "API Service": Authenticate User
alt Authentication Failed
  "API Service" --> User: HTTP 401 Unauthorized
  deactivate "API Service"
  stop
end
"API Service" -> "API Service": Validate Input Data
"API Service" -> "Place Model": createPlace(placeData, userID)
activate "Place Model"
"Place Model" -> "Place Model": Validate Data
"Place Model" -> Database: Persist Place Data
activate Database
Database --> "Place Model": Confirmation (Place ID)
deactivate Database
"Place Model" -> "Place Model": Create Place Object
"Place Model" --> "API Service": Place Object
deactivate "Place Model"
"API Service" -> "API Service": Generate Success Response
"API Service" --> User: HTTP 201 (Place Data, Confirmation)
deactivate "API Service"
@enduml


@startuml
actor User
participant "API Service"
participant "Place Model"
participant "Review Model"
database Database

User -> "API Service": POST /places/{place_id}/reviews (Review Data, Auth Token)
activate "API Service"
"API Service" -> "API Service": Authenticate User
alt Authentication Failed
  "API Service" --> User: HTTP 401 Unauthorized
  deactivate "API Service"
  stop
end

"API Service" -> "API Service": Validate Input Data
"API Service" -> "Place Model": getPlace(place_id)
activate "Place Model"
"Place Model" -> Database: Query Place Data
activate Database
Database --> "Place Model": Place Data
deactivate Database
"Place Model" --> "API Service": Place Object
deactivate "Place Model"

alt Place Not Found
    "API Service" --> User: HTTP 404 Not Found
    deactivate "API Service"
    stop
end

"API Service" -> "Review Model": createReview(reviewData, userID, placeID)
activate "Review Model"
"Review Model" -> "Review Model": Validate Data
"Review Model" -> Database: Persist Review Data
activate Database
Database --> "Review Model": Confirmation (Review ID)
deactivate Database
"Review Model" -> "Review Model": Create Review Object
"Review Model" --> "API Service": Review Object
deactivate "Review Model"

"API Service" -> "Place Model": updateAverageRating(place_id)
activate "Place Model"
"Place Model" -> Database: Update Place Rating
activate Database
Database --> "Place Model": Confirmation
deactivate Database
deactivate "Place Model"

"API Service" -> "API Service": Generate Success Response
"API Service" --> User: HTTP 201 (Review Data, Confirmation)
deactivate "API Service"
@enduml


@startuml
actor User
participant "API Service"
participant "Place Model"
database Database

User -> "API Service": GET /places?location=London&amenities=pool
activate "API Service"
"API Service" -> "API Service": Validate Search Parameters
"API Service" -> "Place Model": getPlaces(searchCriteria)
activate "Place Model"
"Place Model" -> "Place Model": Construct Database Query
"Place Model" -> Database: Execute Query
activate Database
Database --> "Place Model": List of Place Records
deactivate Database
"Place Model" -> "Place Model": Transform Records to Place Objects
"Place Model" --> "API Service": List of Place Objects
deactivate "Place Model"
"API Service" -> "API Service": Format Response (JSON)
"API Service" --> User: HTTP 200 (List of Places)
deactivate "API Service"
@enduml

